{"version":3,"sources":["mouseState.js","store.js","components/html_components/VideoSandbox.js","App.js","reportWebVitals.js","index.js"],"names":["mouseState","create","set","videoPaths","videoIndex","switchVideos","state","length","sceneIndex","selectScene0","selectScene1","selectScene2","selectScene3","bears","increasePopulation","removeAllBears","x","y","console","log","baseVideoPath","document","location","origin","window","pathname","videoTwo","videoOne","WIDTH","HEIGHT","offset","SCALE_OFFSET","body","scrollWidth","Navigation","canvasRef","useRef","videoRef","videoRef2","useEffect","canvas","current","ctx","getContext","video","video2","width","height","oncanplay","draw","drawImage","requestAnimationFrame","fillText","ref","autoPlay","muted","loop","style","src","type","backgroundColor","zIndex","className","App","onDocumentPointerMove","e","clientX","clientY","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6NAKeA,GCHEC,aAAO,SAAAC,GAAG,MAAK,CAC9BC,WAAY,CACV,sBACA,sBAGFC,WAAY,EACZC,aAAc,kBAAMH,GAAI,SAAAI,GAAK,MAAK,CAChCF,YAAcE,EAAMF,WAAa,GAAME,EAAMH,WAAWI,YAG1DC,WAAY,EACZC,aAAc,kBAAMP,GAAI,WACtB,MAAO,CAAEM,WAAY,OAEvBE,aAAc,kBAAMR,GAAI,iBAAO,CAAEM,WAAY,OAC7CG,aAAc,kBAAMT,GAAI,iBAAO,CAAEM,WAAY,OAC7CI,aAAc,kBAAMV,GAAI,iBAAO,CAAEM,WAAY,OAC7CK,MAAO,EACPC,mBAAoB,kBAAMZ,GAAI,SAAAI,GAAK,MAAK,CAAEO,MAAOP,EAAMO,MAAQ,OAC/DE,eAAgB,kBAAMb,EAAI,CAAEW,MAAO,SDtBjB,CAClBG,EAAG,EACHC,EAAG,I,OEGLC,QAAQC,IAAI,QAEZ,IAAMC,EAAgBC,SAASC,SAASC,OAASC,OAAOF,SAASG,SAAW,UACtEC,EAAWN,EAAgB,eAC3BO,EAAWP,EAAgB,cAC3BQ,EAAQ,KACRC,EAAS,KACXC,EAASF,IACTG,EAAgBH,EAAQP,SAASW,KAAKC,YAG3B,SAASC,IAKtB,IAAMC,EAAYC,mBACZC,EAAWD,mBACXE,EAAYF,mBAwBlB,OAtBAG,qBAAU,WACR,IAAMC,EAASL,EAAUM,QACnBC,EAAMF,EAAOG,WAAW,MACxBC,EAAQP,EAASI,QACjBI,EAASP,EAAUG,QAEzBD,EAAOM,MAAQF,EAAME,MAAQD,EAAOC,MAAQlB,EAC5CY,EAAOO,OAASH,EAAMG,OAASF,EAAOE,OAASlB,EAS/Ce,EAAMI,UAPO,SAAPC,IACJnB,EAAS9B,EAAWgB,EAAIe,EACxBW,EAAIQ,UAAUN,EAAO,EAAG,EAAGhB,EAAOC,EAAQ,EAAG,EAAGD,EAAOC,GACvDa,EAAIQ,UAAUL,EAAQf,EAAQ,EAAGF,EAAME,EAAQD,EAAQC,EAAQ,EAAGF,EAAME,EAAQD,GAChFsB,sBAAsBF,IAIxBP,EAAIU,SAAS,mBAAoB,GAAI,MAEpC,IAID,mCAEE,gCACE,uBAAOC,IAAKhB,EAAUiB,UAAQ,EAACC,OAAK,EAACC,MAAI,EAAgBC,MAAO,CAACX,MAAO,OAAQC,OAAQ,QAAxF,SACE,wBAAQW,IAAK/B,EAAUgC,KAAK,eADiBhC,GAI/C,uBAAO0B,IAAKf,EAAWgB,UAAQ,EAACC,OAAK,EAACC,MAAI,EAAgBC,MAAO,CAACX,MAAO,OAAQC,OAAQ,QAAzF,SACE,wBAAQW,IAAKhC,EAAUiC,KAAK,eADkBjC,GAIhD,wBACE2B,IAAKlB,EACLsB,MAAO,CAAEG,gBAAiB,QAASC,OAAQ,KAC3CC,UAAU,sBAhDpB5C,QAAQC,IAAIY,GCUGgC,MAnBf,WACE,IAAMC,EAAwB,SAACC,GAC7BjE,EAAWgB,EAAIiD,EAAEC,QACjBlE,EAAWiB,EAAIgD,EAAEE,SAOnB,OAJA5B,qBAAU,WACRlB,SAAS+C,iBAAiB,YAAaJ,GAAuB,KAC7D,IAGD,mCACE,qBAAKF,UAAU,yBAAf,SACE,cAAC,EAAD,SCNOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAAS4D,eAAe,SAM1BZ,M","file":"static/js/main.e425e581.chunk.js","sourcesContent":["const mouseState =  {\r\n  x: 0,\r\n  y: 0\r\n}\r\n\r\nexport default mouseState","import create from 'zustand'\r\n\r\nconst useStore = create(set => ({\r\n  videoPaths: [\r\n    '/video/blue_hex.mp4',\r\n    '/video/red_hex.mp4',\r\n    // '/video/hex_hdri.mp4',\r\n  ],\r\n  videoIndex: 0,\r\n  switchVideos: () => set(state => ({ \r\n    videoIndex: ((state.videoIndex + 1) % (state.videoPaths.length)) \r\n  })),\r\n\r\n  sceneIndex: 0,\r\n  selectScene0: () => set(() => {\r\n    return { sceneIndex: 0 }\r\n  }),\r\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\r\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\r\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\r\n  bears: 0,\r\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\r\n  removeAllBears: () => set({ bears: 0 })\r\n}))\r\n\r\nexport default useStore","\r\nimport { useEffect, useRef } from 'react'\r\nimport useStore from '../../store'\r\nimport mouseState from '../../mouseState.js'\r\n\r\nconsole.log(\"HERE\")\r\n\r\nconst baseVideoPath = document.location.origin + window.location.pathname + '/video/'\r\nconst videoTwo = baseVideoPath + 'blue_hex.mp4'\r\nconst videoOne = baseVideoPath + 'red_hex.mp4'\r\nconst WIDTH = 1920;\r\nconst HEIGHT = 1080;\r\nlet offset = WIDTH >> 1\r\nlet SCALE_OFFSET = (WIDTH / document.body.scrollWidth)\r\nconsole.log(SCALE_OFFSET)\r\n\r\nexport default function Navigation() {\r\n  // const videoIndex = useStore(state => state.videoIndex)\r\n  // const videoPaths = useStore(state => state.videoPaths)\r\n  // const currentVideo = document.location.origin + window.location.pathname + videoPaths[videoIndex]\r\n\r\n  const canvasRef = useRef()\r\n  const videoRef = useRef()\r\n  const videoRef2 = useRef()\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    const ctx = canvas.getContext(\"2d\")\r\n    const video = videoRef.current\r\n    const video2 = videoRef2.current\r\n\r\n    canvas.width = video.width = video2.width = WIDTH;\r\n    canvas.height = video.height = video2.height = HEIGHT;\r\n\r\n    const draw = () => {\r\n      offset = mouseState.x * SCALE_OFFSET\r\n      ctx.drawImage(video, 0, 0, WIDTH, HEIGHT, 0, 0, WIDTH, HEIGHT)\r\n      ctx.drawImage(video2, offset, 0, WIDTH-offset, HEIGHT, offset, 0, WIDTH-offset, HEIGHT)\r\n      requestAnimationFrame(draw);\r\n    }\r\n\r\n    video.oncanplay = draw;\r\n    ctx.fillText(\"Loading video...\", 20, 20)\r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div>\r\n        <video ref={videoRef} autoPlay muted loop key={videoOne} style={{width: '100%', height: '100%'}}>\r\n          <source src={videoOne} type=\"video/mp4\" />\r\n        </video>\r\n\r\n        <video ref={videoRef2} autoPlay muted loop key={videoTwo} style={{width: '100%', height: '100%'}}>\r\n          <source src={videoTwo} type=\"video/mp4\" />\r\n        </video>\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{ backgroundColor: 'black', zIndex: 100 }}\r\n          className=\"cover-screen\"\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}","import './App.css';\r\nimport VideoSandbox from \"./components/html_components/VideoSandbox\"\r\nimport mouseState from './mouseState';\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const onDocumentPointerMove = (e) => {\r\n    mouseState.x = e.clientX\r\n    mouseState.y = e.clientY\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousemove', onDocumentPointerMove, false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"html-content-container\">\r\n        <VideoSandbox />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}