{"version":3,"sources":["mouseState.js","store.js","components/html_components/VideoSandbox.js","App.js","reportWebVitals.js","index.js"],"names":["mouseState","create","set","videoPaths","videoIndex","switchVideos","state","length","sceneIndex","selectScene0","selectScene1","selectScene2","selectScene3","bears","increasePopulation","removeAllBears","x","y","console","log","baseVideoPath","document","location","origin","window","pathname","videoOne","videoTwo","WIDTH","HEIGHT","offset","SCALE_OFFSET","body","scrollWidth","Navigation","canvasRef","useRef","videoRef","videoRef2","useEffect","canvas","current","ctx","getContext","video","video2","width","height","oncanplay","draw","drawImage","requestAnimationFrame","fillText","ref","autoPlay","muted","loop","style","src","type","backgroundColor","zIndex","className","App","onDocumentPointerMove","e","clientX","clientY","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6NAKeA,GCHEC,aAAO,SAAAC,GAAG,MAAK,CAC9BC,WAAY,CACV,sBACA,sBAGFC,WAAY,EACZC,aAAc,kBAAMH,GAAI,SAAAI,GAAK,MAAK,CAChCF,YAAcE,EAAMF,WAAa,GAAME,EAAMH,WAAWI,YAG1DC,WAAY,EACZC,aAAc,kBAAMP,GAAI,WACtB,MAAO,CAAEM,WAAY,OAEvBE,aAAc,kBAAMR,GAAI,iBAAO,CAAEM,WAAY,OAC7CG,aAAc,kBAAMT,GAAI,iBAAO,CAAEM,WAAY,OAC7CI,aAAc,kBAAMV,GAAI,iBAAO,CAAEM,WAAY,OAC7CK,MAAO,EACPC,mBAAoB,kBAAMZ,GAAI,SAAAI,GAAK,MAAK,CAAEO,MAAOP,EAAMO,MAAQ,OAC/DE,eAAgB,kBAAMb,EAAI,CAAEW,MAAO,SDtBjB,CAClBG,EAAG,EACHC,EAAG,I,OEGLC,QAAQC,IAAI,QAEZ,IAAMC,EAAgBC,SAASC,SAASC,OAASC,OAAOF,SAASG,SAAW,UACtEC,EAAWN,EAAgB,eAC3BO,EAAWP,EAAgB,cAC3BQ,EAAQ,KACRC,EAAS,KACXC,EAASF,IACTG,EAAgBH,EAAQP,SAASW,KAAKC,YAG3B,SAASC,IAKtB,IAAMC,EAAYC,mBACZC,EAAWD,mBACXE,EAAYF,mBAyBlB,OAvBAG,qBAAU,WACR,IAAMC,EAASL,EAAUM,QACnBC,EAAMF,EAAOG,WAAW,MACxBC,EAAQP,EAASI,QACjBI,EAASP,EAAUG,QAEzBD,EAAOM,MAAQF,EAAME,MAAQD,EAAOC,MAAQlB,EAC5CY,EAAOO,OAASH,EAAMG,OAASF,EAAOE,OAASlB,EAU/Ce,EAAMI,UARO,SAAPC,IACJnB,EAAS9B,EAAWgB,EAAIe,EAExBW,EAAIQ,UAAUN,EAAO,EAAG,EAAGhB,EAAOC,EAAQ,GAAI,EAAGD,EAAOC,GACxDa,EAAIQ,UAAUL,EAAQf,EAAQ,EAAGF,EAAME,EAAQD,EAAQC,EAAQ,EAAGF,EAAME,EAAQD,GAChFsB,sBAAsBF,IAIxBP,EAAIU,SAAS,mBAAoB,GAAI,MAEpC,IAID,mCAEE,gCACE,uBAAOC,IAAKhB,EAAUiB,UAAQ,EAACC,OAAK,EAACC,MAAI,EAAgBC,MAAO,CAACX,MAAO,OAAQC,OAAQ,QAAxF,SACE,wBAAQW,IAAKhC,EAAUiC,KAAK,eADiBjC,GAI/C,uBAAO2B,IAAKf,EAAWgB,UAAQ,EAACC,OAAK,EAACC,MAAI,EAAgBC,MAAO,CAACX,MAAO,OAAQC,OAAQ,QAAzF,SACE,wBAAQW,IAAK/B,EAAUgC,KAAK,eADkBhC,GAIhD,wBACE0B,IAAKlB,EACLsB,MAAO,CAAEG,gBAAiB,QAASC,OAAQ,KAC3CC,UAAU,sBAjDpB5C,QAAQC,IAAIY,GCWGgC,MApBf,WACE,IAAMC,EAAwB,SAACC,GAE7BjE,EAAWgB,EAAIiD,EAAEC,QACjBlE,EAAWiB,EAAIgD,EAAEE,SAOnB,OAJA5B,qBAAU,WACRlB,SAAS+C,iBAAiB,YAAaJ,GAAuB,KAC7D,IAGD,mCACE,qBAAKF,UAAU,yBAAf,SACE,cAAC,EAAD,SCPOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAAS4D,eAAe,SAM1BZ,M","file":"static/js/main.5b281030.chunk.js","sourcesContent":["const mouseState =  {\n  x: 0,\n  y: 0\n}\n\nexport default mouseState","import create from 'zustand'\n\nconst useStore = create(set => ({\n  videoPaths: [\n    '/video/blue_hex.mp4',\n    '/video/red_hex.mp4',\n    // '/video/hex_hdri.mp4',\n  ],\n  videoIndex: 0,\n  switchVideos: () => set(state => ({ \n    videoIndex: ((state.videoIndex + 1) % (state.videoPaths.length)) \n  })),\n\n  sceneIndex: 0,\n  selectScene0: () => set(() => {\n    return { sceneIndex: 0 }\n  }),\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n\nexport default useStore","\nimport { useEffect, useRef } from 'react'\nimport useStore from '../../store'\nimport mouseState from '../../mouseState.js'\n\nconsole.log(\"HERE\")\n\nconst baseVideoPath = document.location.origin + window.location.pathname + '/video/'\nconst videoOne = baseVideoPath + 'blue_hex.mp4'\nconst videoTwo = baseVideoPath + 'red_hex.mp4'\nconst WIDTH = 1920;\nconst HEIGHT = 1080;\nlet offset = WIDTH >> 1\nlet SCALE_OFFSET = (WIDTH / document.body.scrollWidth)\nconsole.log(SCALE_OFFSET)\n\nexport default function Navigation() {\n  // const videoIndex = useStore(state => state.videoIndex)\n  // const videoPaths = useStore(state => state.videoPaths)\n  // const currentVideo = document.location.origin + window.location.pathname + videoPaths[videoIndex]\n\n  const canvasRef = useRef()\n  const videoRef = useRef()\n  const videoRef2 = useRef()\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n    const video = videoRef.current\n    const video2 = videoRef2.current\n\n    canvas.width = video.width = video2.width = WIDTH;\n    canvas.height = video.height = video2.height = HEIGHT;\n\n    const draw = () => {\n      offset = mouseState.x * SCALE_OFFSET\n      // console.log(mouseState.x)\n      ctx.drawImage(video, 0, 0, WIDTH, HEIGHT, 20, 0, WIDTH, HEIGHT)\n      ctx.drawImage(video2, offset, 0, WIDTH-offset, HEIGHT, offset, 0, WIDTH-offset, HEIGHT)\n      requestAnimationFrame(draw);\n    }\n\n    video.oncanplay = draw;\n    ctx.fillText(\"Loading video...\", 20, 20)\n\n  }, []);\n\n\n  return (\n    <>\n\n      <div>\n        <video ref={videoRef} autoPlay muted loop key={videoOne} style={{width: '100%', height: '100%'}}>\n          <source src={videoOne} type=\"video/mp4\" />\n        </video>\n\n        <video ref={videoRef2} autoPlay muted loop key={videoTwo} style={{width: '100%', height: '100%'}}>\n          <source src={videoTwo} type=\"video/mp4\" />\n        </video>\n\n        <canvas\n          ref={canvasRef}\n          style={{ backgroundColor: 'black', zIndex: 100 }}\n          className=\"cover-screen\"\n        />\n      </div>\n    </>\n  )\n}","import './App.css';\nimport VideoSandbox from \"./components/html_components/VideoSandbox\"\nimport mouseState from './mouseState';\nimport React, { useEffect } from 'react';\n\nfunction App() {\n  const onDocumentPointerMove = (e) => {\n    // console.log(e.clientX)\n    mouseState.x = e.clientX\n    mouseState.y = e.clientY\n  }\n\n  useEffect(() => {\n    document.addEventListener('mousemove', onDocumentPointerMove, false);\n  }, []);\n\n  return (\n    <>\n      <div className=\"html-content-container\">\n        <VideoSandbox />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}